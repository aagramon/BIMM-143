---
title: "Class 13"
format: pdf
editor: visual
---

## Mini-Project

We will start by loading our data files

```{r}
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"

colData = read.csv(metaFile, row.names=1)
head(colData)

countData = read.csv(countFile, row.names=1)
head(countData)
```

**Q1**. Complete the code below to remove the troublesome first column from `countData`

```{r}
countData <- as.matrix(countData[,-1])
head(countData)
```

We will now remove the entries that are 0

**Q2**. Complete the code below to filter `countData` to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

```{r}
countData = countData[rowSums(countData)>0,]
head(countData)
```

Now we will begin to use Deseq2

```{r}
library(DESeq2)
dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
```

```{r}
dds = DESeq(dds)
```

```{r}
dds
```

We will get the results for the HoxA1 knockdown versus siRNA

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```

**Q3**. Call the **summary()** function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```

Now we will form the volcano plot

```{r}
plot( res$log2FoldChange, -log(res$padj) )
```

**Q4**. Improve this plot by completing the below code, which adds color and axis labels

```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res) )

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "red"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (abs(res$pvalue) < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
```

We will now add gene annotation

**Q5**. Use the **mapIDs()** function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

**Q6**. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file = "deseq_results.csv")
```

# Pathway Analysis

First we are going to install the GAGE package and then apply it for pathway analysis.

```{r}
#BiocManager::install( c("pathview", "gage", "gageData") )
```

We will start by loading the packages

```{r}
library(pathview)
```

```{r}
library(gage)
```

```{r}
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

Using the gage() function with the previous Entrez gene IDs

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Now, let's run the gage pathway analysis

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

This is the object returned by gage analysis

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)

```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

This is the image produced by the pathview data

![](hsa04110.pathview.png)

making a PDF instead

```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

We are going to use KEGG pathways

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

Next will be passed to pathview

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04640.pathview.png)

![](hsa04630.pathview.png)

![](hsa04330.pathview.png)

![](hsa04142.pathview.png)

![](hsa04110.pathview.png)

![](hsa00140.pathview.png)

**Q7**. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
keggrespathways2 <- rownames(keggres$less)[1:5]

keggresids2 = substr(keggrespathways2, start=1, stop=8)
keggresids2
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids2, species="hsa")
```

![](hsa03440.pathview.png)

![](hsa00140.pathview.png)

![](hsa03013.pathview.png)

![](hsa03030.pathview.png)

# GENE ONTOLOGY

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

# Reactome Analysis

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

**Q8**: What pathway has the most significant "Entities p-value"? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

Cell cycle mitotic has the most significant entities p-value
