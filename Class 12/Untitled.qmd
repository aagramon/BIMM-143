---
title: "Class 12"
author: "Arturo Agramont"
format: pdf
editor: visual
---

## 2. Import countData and colData

We will start by loading the airway data, we will import count and metadata

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
head(metadata)
```

```{r}
nrow(counts)
```

```{r}
control_cell_lines = table(metadata$dex)['control']
```

-   **Q1.** How many genes are in this dataset? In this code there are `r nrow(counts)`genes

-   **Q2.** How many 'control' cell lines do we have? We have `r control_cell_lines` control cell lines in this data.

# 3. Toy differential gene expression

Code that was provided

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

Breaking down the code to understand it

```{r}
metadata[,"dex"]=="control"
```

```{r}
control = metadata[metadata[,"dex"]=="control",]
control$id
```

```{r}
control.counts = counts[,control$id]
control.mean <- rowMeans( control.counts )
```

-   **Q3.** How would you make the above code in either approach more robust?

```{r}
 control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowMeans( control.counts ) 
head(control.mean)
```

**Q4.** Follow the same procedure for the treated samples (i.e.Â calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean

```{r}
treated = metadata[metadata[,"dex"]=="treated",]
treated.counts = counts[ ,treated$id]
treated.mean = rowMeans( treated.counts)
head(treated.mean)
```

Combining both means

```{r}
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
```

-   **Q5 (a).** Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```

**Q5 (b).**You could also use the **ggplot2** package to make this figure producing the plot below. What **geom\_?()** function would you use for this plot? You would use geom_point()

```{r}
library(ggplot2)
ggplot(meancounts) + geom_point(aes(meancounts[,1], meancounts[,2], alpha = 0.5))
```

**Q6.** Try plotting both axes on a log scale. What is the argument to **plot()** that allows you to do this?

```{r}
plot(meancounts, log = "xy", xlab = "Control", ylab = "Treated")
```

We will begin to take log2 of the data in order to find larger mathematical differences between control and treated. Log2 of the fold change between both.

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

We will try to remove and filter out zeros so that we do not get the same errors

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

-   **Q7.** What is the purpose of the `arr.ind` argument in the **which()** function call above? Why would we then take the first column of the output and need to call the **unique()** function?

Overexpressed and underexpressed genes

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

**Q8.** Using the `up.ind` vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
table(up.ind)

```

There are 250 up regulated genes

**Q9.** Using the `down.ind` vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
table(down.ind)
```

There are 367 down regulated genes

-   **Q10.** Do you trust these results? Why or why not?

    No there are many other factors that need to be included into having statistical significance. We need to bring the statistics that represent why the difference matters.

# 4. DESeq2 analysis

first step, loading the library

```{r}
library(DESeq2)
```

```{r}
citation('DESeq2')
```

Let's generate the specific object that DESeq2 needs:

```{r}
dds = DESeqDataSetFromMatrix(countData = counts,
                             colData = metadata,
                             design = ~dex )

```

```{r}
DESeq(dds)
```
