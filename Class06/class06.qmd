---
title: "Class 06: R Functions"
author: "Arturo Agramont"
format: pdf
editor: visual
date: 2023-04-21
---

In this class we will develop our own R function to calculate average grades in a fictional class.

We well start with a simplified version of the problem. Just calculating the average grade for one student.

# Simplified version

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

We are going to start by calculating the average score of the homeworks.

```{r}
mean(student1)
which.min(student1)

```

The way in which to obtain the average of the homework scores excluding the lowest score

```{r}
mean(student1[-which.min(student1)])
```

I can get the mean of homeworks after dropping by doing

```{r}
student1_drop_lowest= student1[-which.min(student1)]
mean(student1_drop_lowest)
```

Trying to generalize to student 2

```{r}
student2_drop_lowest = student2[-which.min(student2)]
student2_drop_lowest
```

Finding a way to remove NA from the sequence

```{r}
na.omit(student2)

```

Using to na.omit to find the mean

```{r}
mean(na.omit(student2))
```

Finding mean of student 2

```{r}
mean(student2, na.rm = T)
```

This does not work for student 3

```{r}
mean(student3, na.rm = T)
```

We want to know positions of NAs so we can use

```{r}
student2
which(is.na(student2))
```

For student 3

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA) 
which(is.na(student3))
```

for considering missing values, we can mask NA with zeros

```{r}
which(is.na(student2))
student2[is.na(student2)] = 0



```

If used for student 3

```{r}
student3[is.na(student3)] = 0
mean(student3)

```

Removing the lowest score

```{r}
mean(student3[-which.min(student3)])
```

This is going to be final working snippet for all students

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
student3[is.na(student3)] = 0
mean(student3[-which.min(student3)])
```

Let's build a function now

```{r}
#x[is.na(x)] = 0
#mean(x[-which.min(x)])
```

# Function: grade()

Q1

We can write it as a function

```{r}
#' Calculate the average score for a sector of homework scores, dropping the lowest score, and considering NA values as zeros.
#'
#' @param x numeric vector of homework scores
#'
#' @return average value of homework scores
#' @export
#'
#' @examples
#' 
#' student = c(100,75,50,0)
#' grade(student)
#' 
grade = function(x){
  #we are masking values, changing NA to 0
  x[is.na(x)] = 0 
  #finding the average grade while removing the lowest score
  mean(x[-which.min(x)])
}
```

Let's apply the function

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

grade(student1)
grade(student2)
grade(student3)
```

Let's apply our function to the grade book from the URL

"https://tinyurl.com/gradeinput"

```{r}
URL = "https://tinyurl.com/gradeinput"
gradebook = read.csv(URL, row.names = 1)
gradebook

```

Applying the function using apply, with function grade on gradebookm using margin = 1

```{r}
apply(gradebook, MARGIN = 1, FUN = grade)
```

Q2 Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
which.max(apply(gradebook, MARGIN = 1, FUN = grade))

```

Student 18 is the highest scoring student overall.

```{r}
max(apply(gradebook, MARGIN = 1, FUN = grade))
```

Maximum score is 94.5

Q3 From your analysis of the grade book, which homework was toughest on students (i.e. obtained the lowest scores overall?)

First we mask all of the NAs into 0, then we can take the average of each homework assignment.

```{r}
gradebook[is.na(gradebook)] = 0
apply(gradebook, MARGIN = 2, FUN = mean)
```

Homework 2 was the toughest on the students, it had the lowest average of the 5 homework assignments. Having the missing homework may be too strict and not a good representation of the difficulty of the homework.

```{r}
gradebook = read.csv(URL, row.names = 1)
apply(gradebook, MARGIN = 2, FUN = mean, na.rm = T)
```

In this case Homework 3 is the most difficult.

If we use the median instead of the mean...

```{r}
apply(gradebook, MARGIN = 2, FUN = median, na.rm = T)

```

Q4. From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?

```{r}
overall_grades = apply(gradebook, MARGIN = 1, FUN = grade)
overall_grades

```

```{r}
cor(gradebook$hw1,overall_grades)
```

```{r}
gradebook[is.na(gradebook)] = 0
apply(gradebook, 2, cor, overall_grades)
```

The maximum is...

```{r}
which.max(apply(gradebook, 2, cor, overall_grades))
```

HW 5 had the greatest correlation between the overall grade.
